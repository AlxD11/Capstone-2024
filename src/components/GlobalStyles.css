/* This is the main .css file. Currently, it contains styles for each React component.

I chose to use a single file for all components because I thought it would be easier to keep things consistent,
such as consistent access to color variables, and catch naming conflicts.
If this file gets crowded or too confusing to manage, we can split things off later. */

/* Naming Conventions:

I couldn't find a guide on the "proper" naming conventions when using CSS with React, so this is how I'm doing it.

	1. Most components are given a CSS class identifier that matches its name. Capitalization is also matched.
	For example, the component "HomeScreen" is given a class name of "HomeScreen".

	2. If a component's name appears as a portion of a class identifier, the other parts of the class identifier
	use standard CSS naming convention.	For example, "HomeScreen-info" combines a component name and some other stuff.

So far, I feel like this makes it easy to tell what CSS rules apply to which components.
(I'm not sure how much I like using capitals in the class names, though, 'cause that's differrent from most CSS I've seen.)
If any of this is confusing, or if you know a better way, I'm all ears. */

/* This is a quick edit to test my local Git settings. */


:root
{
	/* Raw Swatch Colors */
	--hot-pink: #EE1D52;
	--pale-pink: #FDAFB7;
	--pale-pink-2: #F9E0EA;
	--brown: #4F3422;

	/* Linked Colors / Color Variables */
	--nav-text-color: var(--hot-pink);
	--body-text-light-color: darkgray;
}

body
{
	font-family: "Roboto", "Verdana", sans-serif;
}


/* ---------------------------------------------- HomeScreen Component Elements ---------------------------------------------- */

.HomeScreen
{
	min-height: 75vh;
	margin-left: 1vw;
	margin-right: 1vw;
	margin-top: 1vw;
	margin-bottom: 1vw;
}

.HomeWelcomeMsg > p
{
	padding-left: 10vw;
	color: var(--body-text-light-color);
}

.HomeScreen-info
{
	display: flex;
	justify-content: space-between;
	font-size: 0.75em;
}

.HomeScreen button
{
	margin-top: 10px;
	padding: 10px;
	background-color: var(--pale-pink);
	color: #fff;
	font-size: 1.25em;
	border: none;
	cursor: pointer;
	border-style: solid;
	border-width: 4px;
	border-color: var(--pale-pink);
	border-radius: 8px;
}


/* ---------------------------------------------- Reminder Component Elements ---------------------------------------------- */

.Reminders
{
	/* Layout */
	max-width: 35vw;
	
	/* Spacing */
	margin-top: 6em;
	padding: 4px;
	padding-right: 10px;
	
	/* Colors and Effects */
	background-color: var(--pale-pink-2);
	border-style: solid;
	border-width: 4px;
	border-color: var(--pale-pink);
	border-radius: 8px;
}

.Reminders > .reminder-entry
{
	padding-left: 2em;
}

.Reminders button
{
	background-color: var(--pale-pink);
	color: lightgray;
}

.InfoSummary
{
	padding: 4em;
	margin: 8em;
	
	width: 40vw;
	height: 30vh;
	background-color: lightgray;
}


/* ---------------------------------------------- NavBar Component Elements ---------------------------------------------- */

/* NavBar, the top navigation bar. */
.NavBar
{
	/* Layout */
	display: flex;
	justify-content: space-between; /* Distribute contents along the x axis. */
	align-items: center; /* Center contents relative to each other along the y-axis. */
	
	/* Spacing */
	padding: 4px; /* Keep all contents 4px away from the edges. */
	
	/* Color and Border */
	border-width: 2px;
	border-color: lightgray;
	/* border style: top right bottom left; */
	background-color:ghostwhite;
	filter: drop-shadow(0px 4px 2px lightgray);
}

.NavBar > nav
{
	display: flex;
	justify-content: space-between;

	min-width: 40vw; /* Force the nav menu to take up most (40%) of the horizontal window space. */
}

.NavBar > nav > a
{
	padding-left: 5px; /* Add padding to the navigation links so they can't touch each other, even when squished together. */
	padding-right: 5px;

	/* Text Color / Effects */
	color: var(--nav-text-color);
	text-decoration: none;
	font-size: 1.5em; /* TODO: Make responsive to page width. */
	font-weight: bold;
}

.NavBar > nav > a:hover
{
	text-decoration: underline;
}

.NavBar img
{
	max-height: 64px;
	max-width: 64px;
	padding: 8px;
}

.avatar
{
	vertical-align: middle;
	width: 80px;
	height: 80px;
	border-radius: 50%; /* Makes the border circular. */
	border-width: 5px;
	border-color: gray;
	border-style: outset;
}


/* ---------------------------------------------- Footer Component Elements ---------------------------------------------- */

.Footer
{
	display: flex;
}

.Footer-icons
{
	display: flex;
	flex-direction: column; /* Make the divs (app icons vs social icons) stack vertically. */

	min-width: 25vw; /* Force the box of icons to take up at least 20% of the window width (vw). */
}

.Footer-icons img
{
	max-width: 32px;
	max-height: 32px;
	padding-left: 4px;
	padding-right: 4px;
	padding-top: 8px;
}

.Footer-resources p
{
	font-size: 0.75em; /* Make the footer text size smaller. */
	margin: 0.25em; /* Compact the list of resources. */
}


/* ---------------------------------------------- MoodPoll Component Elements ---------------------------------------------- */

.MoodPoll
{
	/* Same as HomeScreen. I think I need to restructure the way the main body content (i.e. not navigation hear or footer) is
	handled. Maybe make a class identifier shared by all main body pages that has these common properties? */
	min-height: 75vh;
	margin-left: 1vw;
	margin-right: 1vw;
	margin-top: 1vw;
	margin-bottom: 1vw;
}

.PollQuestion
{
	margin-top: 10vh; /* Keep the question block away from the edges of the screen and other questions. */
	margin-bottom: 10vh;
	margin-left: 5vw;
	margin-right: 5vw;
}

.PollQuestion p
{
	color: var(--brown);
	font-size: 1.5em;
	font-weight: bold;
}

.PollQuestion ul
{
	display: flex;
	flex-direction: column; /* Make the content go vertical, not horizontal. */
	align-items: center; /* Put the content in the middle of the contianer (horizontally, due to flex-direction: column). */
	
	/* Dev Note: align-items (and other align- justify- properties) will be relative to the element's content axis (??).
	This axis will be wither veritcal or horizontal, depending on the flex-direction property. */
}

.PollQuestion li
{
	display: flex;
	align-items: center; /* Align the contents (text and image) vertically. */
	justify-content: space-between; /* Force the two contained items (text and image) onto opposite ends of the container. */
	
	min-width: 30vw; /* Give the container enough width to separate the image and text and make justify-content obvious. */
	padding: 16px;
	
	font-size: 1.25em;
}

.PollQuestion li::marker
{
	display: none;
}

.PollQuestion li:hover
{
	color: var(--hot-pink);
	background-color: var(--pale-pink);
}

.PollQuestion input
{
	padding: 4px;
	margin: 8px;
}

.PollQuestion button
{
	margin-top: 10px;
	padding: 10px;
	background-color: var(--pale-pink);
	color: #fff;
	font-size: 1.25em;
	border: none;
	cursor: pointer;
	border-style: solid;
	border-width: 4px;
	border-color: var(--pale-pink);
	border-radius: 8px;
}

.PollControlls
{
	color: var(--brown);
	font-size: 1.5em;
	font-weight: bold;
	text-align: right; /* Move the "Next" button to the right side of the page. */
}