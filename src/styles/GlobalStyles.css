/* This is the main .css file. Currently, it contains styles for each React component.

I chose to use a single file for all components because I thought it would be easier to keep things consistent,
such as consistent access to color variables, and catch naming conflicts.
If this file gets crowded or too confusing to manage, we can split things off later. */

/* Naming Conventions:

I couldn't find a guide on the "proper" naming conventions when using CSS with React, so this is how I'm doing it.

	1. Most components are given a CSS class identifier that matches its name. Capitalization is also matched.
	For example, the component "HomeScreen" is given a class name of "HomeScreen".

	2. If a component's name appears as a portion of a class identifier, the other parts of the class identifier
	use standard CSS naming convention.	For example, "HomeScreen-info" combines a component name and some other stuff.

So far, I feel like this makes it easy to tell what CSS rules apply to which components.
(I'm not sure how much I like using capitals in the class names, though, 'cause that's differrent from most CSS I've seen.)
If any of this is confusing, or if you know a better way, I'm all ears. */



/* Screen Size Definitions
Variables cannot be used in @media queries, but I'm defining them anyway.
	Tiny Screens 	= up to 450px wide
	Small Screens 	= up to 800px wide
	Medium Screens 	= up to 1280px wide
	Large Screens 	= up to 1920px wide
	Huge Screens 	= over 1920px wide  */

:root {
	/* ----- Raw Colors ----- */
	--hot-pink: #EE1D52;
	--pale-pink: #FDAFB7;
	--pale-pink-2: #F9E0EA;
	--coral: #FC616F;
	--brown: #4F3422;
	--soft-purple: #65558F;
	--intense-purple: #541179;
	--dark-gray: hsl(0, 0%, 40%);
	--light-gray: #F3F3F3;
	--off-white: ghostwhite;
	--faint-orange: hsl(26, 100%, 91%);
	--dark-indigo: hsl(240, 50%, 15%);

	/* ----- Linked Colors / Color Variables ----- 
	--nav-text-color: var(--hot-pink);
	--body-text-color: black;
	--body-text-light-color: rgb(92, 105, 118); 
	--link-text-color: var(--coral);
	--link-background-color: inherit;
	
	/* ----- ACCESSIBILITY ----- */
	/* Add @media(query){} blocks here and change stuff accordingly.
	Ref: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries */
	/* TODO: Add alternative color swatches for high-contrast preference */

	/* High Contrast Color Overrides 
	@media(prefers-contrast)
	{
		--nav-text-color: var(--hot-pink);
		--body-text-color: black;
		--body-text-light-color: rgb(48, 55, 61); 
		--link-text-color: white;
		--link-background-color: var(--coral);
	}
	*/
}

#light {
	/* Add light theme specific colors */
	--pale-pink: #ffe4e1;
	/* Example light color */
	--pale-pink-2: #f9f0f9;
	--soft-purple: #e0b0ff;
	--coral: #ff7f50;
	--intense-purple: #9932cc;
	--faint-orange: #fdd5b1;
	--off-white: #f8f8ff;
	--light-gray: #d3d3d3;
	--brown: #a52a2a;
	--hot-pink: #ff69b4;

	background-color: #f3ebf6;
	--body-text-color: black;
	--body-text-light-color: rgb(92, 105, 118);
	/* Close to slategray. */
	--link-text-color: var(--coral);
	--link-background-color: inherit;
	--button-text-hover: var(--brown);
}

/* Dark Theme */
#dark {
	/* Add dark theme specific colors */
	--pale-pink: #433737;
	/* Example dark color */
	--pale-pink-2: #302030;
	--soft-purple: #553388;
	--coral: #ff4000;
	--intense-purple: #662288;
	--faint-orange: #fa7d00;
	--off-white: #000000;
	--light-gray: #2c2e36;
	--brown: #ff5900;
	--hot-pink: #ff69b4;

	background-color: #222;
	--white: #ffffff;
	--body-text-color: #e0e0e0;
	/* Corrected: Using white for general text */
	--body-text-light-color: rgb(180, 180, 180);
	/* A slightly lighter shade of grey for less emphasized text */
	--link-text-color: var(--coral);
	--link-background-color: inherit;
	--button-text-hover: black;
}

#dark h2 {
	color: var(--body-text-color);
	/* Or a specific color */
}

#dark p {
	color: var(--body-text-color);
	/* Or a specific color */
}

body {
	font-family: "Roboto", "Verdana", sans-serif;
}

a {
	color: var(--link-text-color);
	background-color: var(--link-background-color);
	text-decoration: none;
}

a:hover {
	color: var(--brown);
}

/* Buttons that behave as links.
FIXME: Padding is such that you must click directly on the text to get to the link. */
.linked-button {
	background-color: var(--pale-pink);

	padding: 14px;

	font-size: 1em;
	font-weight: bold;

	cursor: pointer;
	border-style: none;
	border-color: var(--pale-pink);
	border-radius: 8px;
}

.linked-button:hover {
	background-color: var(--coral);
	color: var(--button-text-hover);
}

.linked-button a {
	/* Note: Despite being a <Link> tag, the <a> selector will still work. */
	color: var(--brown);
	text-decoration: none;
}

.avatar {
	vertical-align: middle;
	width: 80px;
	height: 80px;
	border-radius: 50%;
	/* Makes the border circular. */
	border-width: 1px;
	border-color: gray;
	border-style: solid;
	/* Use solid border */
	box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
	/* TODO: Causing the extra space around the avatar - can't figure out a good fix RN */
}

.popup {
	position: fixed;
	top: 50%;
    left: 50%; 
    width: 20%;
    height: auto;
	background-color: var(--light-gray);
	display: flex;
	justify-content: center;
	align-items: center;
}

.popup-content {
	background-color: var(--link-background-color);
    color: var(--body-text-color);
	padding: 35px;
	border-radius: 25px;
	position: relative;
}

.close-button {
	position: absolute;
	top: 10px;
	right: 10px;
	background: none;
	border: none;
	cursor: pointer;
	color: var(--body-text-color);
}

.popup-hidden {
	display: none;
}